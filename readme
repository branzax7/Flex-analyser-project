Oprea Mihail

   I used C.
In the <INITIAL> state, I transition to the state with a relevant name based on the tag found ("<head>",
"<body>", or "<div>"). Additionally, the [^] rule exists in all program states where I don't do anything,
because otherwise the flex analyzer would display on screen everything that doesn't match the rules above,
without me giving it any print command. This was a problem encountered during implementation. I also assumed
that we won't find the "" character in any of the tested HTML files, at least.
In the <body_rule> state, I have 3 rules. In the first rule, I check if I match any tag in the form
"<tag_name". If I match "<div", I initialize the div_tags_i variable with 0, add the found div to the
div_list[20][20] char array at position div_i, and also to the vector where I keep the tags found in body,
namely body_tags[20][20], and increment the counter for this string array through body_i++, then go to the
<div_rule> state. If I match any other tag, I just add it to body_tags at position body_i and go to the
<tag_in_body> state. In state 2, if I have a body closing tag, I return to the <INITIAL> state. The last
rule is the catch-all.
In the <tag_in_body> state, I only return to the <body_rule> state when I find the tag closing through
"</tag_name". For the case where the tag closes with ">", the same thing happens, but it only works for
tags like "<img ....>" and "<input ....>" as these are the only two of this type from the given examples,
so I haven't handled it for others.
In the <div_rule> state, if I find a tag, I add it to the char tags[20][20] array from the div_tags[20]
structure array at position div_tags_i for the tags vector and the same position used for div_list for the
div_tags structure array, namely div_i. Thus, the tags found in a div's body correspond to the div from the
div_list, for example, the div from div_list[div_i] has as tags those from div_tags[div_i].tags. Then I go
to the <tag_in_div> state. When matching the exit rule for the div tag, I return to the <body_rule> or
<INITIAL> state depending on the inside_body variable which tells me if I'm exiting a div from within a
body or not.
In the <tag_in_div> state, I proceed similarly to the <tag_in_body> state.
In the <style_rule> state, I can only get there from <head> where a tag match is made on "tag_name {", and
it's saved in the style_tags[20][20] vector without the last 2 characters. Then I go to the <atr_in_style>
state if a match was made. If I have a style closing tag, I go to the <head_rule> state.
In the <atr_in_style> state, I save the found attributes in the char atr[20][20] array from the atr_style[20]
structure array similar to div (the first tag from style_tags has its attributes in the first structure from
atr_style). This happens only if there's a match on a string followed by ":", and it's saved as an attribute
without the last character, i.e., without the colon. I return to the <style_rule> state only if I encounter
"}", which implies moving to a new tag.
In the <head_rule> state, I go to <style_rule> if I match "<style>", or to <INITIAL> if I match "</head>".
In main, I use all the information stored in all variables defined in the %{...%} section, information found
through the flex analyzer, and then put them all together to display the desired outputs on screen.
What wasn't covered in the implementation requirements was the display of attributes from tags.
